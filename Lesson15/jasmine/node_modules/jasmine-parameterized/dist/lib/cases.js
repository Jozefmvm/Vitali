"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Convenient function to easily parameterized the execution of a `it` spec function.
 * @param parameters An array of single or multiple value parameters. Example: ['foo', 'bar']
 */
function cases(parameters) {
    return {
        it: function (description, code, timeout) {
            if (description === void 0) { description = ''; }
            parameters.forEach(function (parameter, idx) {
                var aCase = new Case(idx, parameter, description);
                it(aCase.buildDescription(), function () { return code(parameter); }, timeout);
            });
        },
        xit: xit
    };
}
exports.cases = cases;
/** @internal */
var Case = /** @class */ (function () {
    function Case(index, parameter, description) {
        this.index = index;
        this.parameter = parameter;
        this.description = description;
    }
    Case.prototype.buildDescription = function () {
        if (this.hasComplexParameter()) {
            return this.description + " [" + this.index + "]";
        }
        return this.description + " (" + this.parameter + ") [" + this.index + "]";
    };
    Case.prototype.hasComplexParameter = function () {
        return this.paramIsANonEmptyObject() && !this.paramIsArray();
    };
    Case.prototype.paramIsANonEmptyObject = function () {
        return typeof this.parameter === 'object'
            && this.parameter !== null
            && Object.keys(this.parameter).length > 0;
    };
    Case.prototype.paramIsArray = function () {
        return Array.isArray(this.parameter);
    };
    return Case;
}());
exports.Case = Case;
